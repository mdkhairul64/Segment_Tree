#include<bits/stdc++.h>
using namespace std;

int a[10005],seg[4*10005],lazy[4*1005];

void bulid(int node,int low,int high)
{
	if (low== high) {
        seg[node] = a[low];
        return;
    }
    int Left = node * 2 + 1;
    int Right = node * 2 + 2;
    int mid = (low + high) / 2;
    bulid(Left, low, mid);
    bulid(Right, mid + 1, high);
    seg[node] = seg[Left] + seg[Right];
}

int query(int ind,int low,int high,int l,int r) //l and r mean in which position i want to change the value
{
	if(low>=l && high <=r)
	{
		return seg[ind] ; ///for completely overlap
	}

	if(high<l || low<r)
	{
		return  INT_MIN;  //this is for no oveeerlap
	}

	int mid=(low+high)/2;

	int left=query(2*ind+1,low,mid,l,r);
	int right=query(2*ind+2,mid+1,high,l,r);

	return max(left,right);


}

// single update
/// call from the main as update (0,0,n-1,node,val);

// void pointUpdate(int ind,int low,int high,int node,int val)
// {
// 	if(low==high)
// 	{
// 		return seg[ind];
// 	}
// 	else{
// 		int mid=(low+high)/2;

// 		if(node<=mid && node>=low)
// 		{
// 			pointUpdate(2*ind+1,low,mid,node,val);
// 		}
// 		else{
// 			pointUpdate(2*ind+2,mid+1,high,node,val);
// 		}
// 		seg[ind]=seg[ind*2+1]+seg[ind*2+2];
// 	}
// }

//   l,r -> range to increse value with val

// void rangeUpdate(int ind,int low,int high,int l,int r,int val)
// {
// 	if(lazy[ind]!=0)
// 	{
// 		seg[ind]+=(high-low+1)*lazy[ind];
// 		if(low!=high)
// 		{
// 			lazy[2*ind+1]+=lazy[ind];
// 			lazy[2*ind+2]+=lazy[ind];
// 		}
// 		lazy[ind]=0;
// 	}

// 	//this is for outside of the range

// 	if(r<low || l>high || low>high)
// 	{
// 		return;
// 	}

// 	///this is for completely  overlap

// 	if(low>=l && high<=r)
// 	{
// 		seg[ind]+=(high-low+1)*val;
// 		if(low!=high)
// 		{
// 			lazy[2*ind+1]+=lazy[ind];
// 			lazy[2*ind+2]+=lazy[ind];
// 		}

// 		return ;
// 	}

// 	/// this is for partially overlap

// 	int mid=(low+high)/2;
// 	rangeUpdate(2*ind+1,low,mid,l,r,val);
// 	rangeUpdate(2*ind+2,mid+1,high,l,r,val);
// 	seg[ind]=seg[ind*2+1]+seg[ind*2+2];

// }


// int querySumLazy(int ind,int low,int high,int l,int r,int val)
// {
// 	if(lazy[ind]!=0)
// 	{
// 		seg[ind]+=(high-low+1)*lazy[ind];

// 		if(low!=high)
// 		{
// 			lazy[2*ind+1]+=lazy[ind];
// 			lazy[2*ind+2]+=lazy[ind];
// 		}
// 		lazy[ind]=0;
// 	}

// 	if(r<low || l>high || low>high)
// 	{
// 		return 0;
// 	}

// 	if(low>=l && high<=r)
// 	{
// 		return seg[ind];
// 	}

// 	int mid=(low+high)>>1;

// 	return  querySumLazy(2*ind+1,low,mid,l,r,val)+querySumLazy(2*ind+2,mid+1,high,l,r,val);

// }


///single update 

void pointUpdate(int ind,int low,int high,int node,int va)
{
	if(low==high)
	{
		seg[low]+=val;
	}
	else{
		int mid=(low+high)/2;

		if(node <= mid && node>=low)
		{
			 pointUpdate(2*ind,low,mid,node,val);
		}
		else{
			pointUpdate(2*ind+1,mid+1,high,node,val);
		}

		seg[ind]=seg[2*ind]+seg[2*ind+1];
	}
}

int main()
{
	int n;
	cin>>n;

	for(int i=0;i<n;i++)
	{
		cin>>a[i];
	}
	bulid(0,0,n-1);

	int q;
	cin>>q;

	while(q--)
	{
		int l,r;
		cin>>l>>r;
		cout<<query(0,0,n-1,l,r)<<endl;
	}
	return 0;
}
